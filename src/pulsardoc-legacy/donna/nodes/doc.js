// Generated by CoffeeScript 1.10.0
(function() {
  var Doc, Node, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  Node = require('./node');

  module.exports = Doc = (function(superClass) {
    extend(Doc, superClass);

    function Doc(node, options) {
      var error, error1, trimmedComment;
      this.node = node;
      this.options = options;
      try {
        if (this.node) {
          trimmedComment = this.leftTrimBlock(this.node.comment.replace(/\u0091/gm, '').split('\n'));
          this.comment = trimmedComment.join("\n");
        }
      } catch (error1) {
        error = error1;
        if (this.options.verbose) {
          console.warn('Create doc error:', this.node, error);
        }
      }
    }

    Doc.prototype.leftTrimBlock = function(lines) {
      var line, minimalTrim, trimMap;
      trimMap = _.map(lines, function(line) {
        if (line.length === 0) {
          return void 0;
        } else {
          return line.length - _.str.ltrim(line).length;
        }
      });
      minimalTrim = _.min(_.without(trimMap, void 0));
      if (minimalTrim > 0 && minimalTrim < Infinity) {
        lines = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = lines.length; i < len; i++) {
            line = lines[i];
            line = line.substring(minimalTrim, line.length);
            results.push(line);
          }
          return results;
        })();
      }
      return lines;
    };

    return Doc;

  })(Node);

}).call(this);
