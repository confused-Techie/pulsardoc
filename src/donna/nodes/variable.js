// Generated by CoffeeScript 1.10.0
(function() {
  var Doc, Node, Variable,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Node = require('./node');

  Doc = require('./doc');

  module.exports = Variable = (function(superClass) {
    extend(Variable, superClass);

    function Variable(entity, node, lineMapping, options, classType, comment) {
      var error, error1;
      this.entity = entity;
      this.node = node;
      this.lineMapping = lineMapping;
      this.options = options;
      this.classType = classType != null ? classType : false;
      if (comment == null) {
        comment = null;
      }
      try {
        this.doc = new Doc(comment, this.options);
        this.getName();
      } catch (error1) {
        error = error1;
        if (this.options.verbose) {
          console.warn('Create variable error:', this.node, error);
        }
      }
    }

    Variable.prototype.getType = function() {
      if (!this.type) {
        this.type = this.classType ? 'class' : 'instance';
      }
      return this.type;
    };

    Variable.prototype.isConstant = function() {
      if (!this.constant) {
        this.constant = /^[A-Z_-]*$/.test(this.getName());
      }
      return this.constant;
    };

    Variable.prototype.getDoc = function() {
      return this.doc;
    };

    Variable.prototype.getName = function() {
      var error, error1, i, len, prop, ref;
      try {
        if (!this.name) {
          this.name = this.node.variable.base.value;
          ref = this.node.variable.properties;
          for (i = 0, len = ref.length; i < len; i++) {
            prop = ref[i];
            this.name += "." + prop.name.value;
          }
          if (/^this\./.test(this.name)) {
            this.name = this.name.substring(5);
            this.type = 'class';
          }
        }
        return this.name;
      } catch (error1) {
        error = error1;
        if (this.options.verbose) {
          return console.warn('Get method name error:', this.node, error);
        }
      }
    };

    Variable.prototype.getLocation = function() {
      var error, error1, firstLine, locationData;
      try {
        if (!this.location) {
          locationData = this.node.variable.locationData;
          firstLine = locationData.first_line + 1;
          if (this.lineMapping[firstLine] == null) {
            this.lineMapping[firstLine] = this.lineMapping[firstLine - 1];
          }
          this.location = {
            line: this.lineMapping[firstLine]
          };
        }
        return this.location;
      } catch (error1) {
        error = error1;
        if (this.options.verbose) {
          return console.warn("Get location error at " + this.fileName + ":", this.node, error);
        }
      }
    };

    Variable.prototype.getValue = function() {
      var error, error1;
      try {
        if (!this.value) {
          this.value = this.node.value.base.compile({
            indent: ''
          });
        }
        return this.value;
      } catch (error1) {
        error = error1;
        if (this.options.verbose) {
          return console.warn('Get method value error:', this.node, error);
        }
      }
    };

    return Variable;

  })(Node);

}).call(this);
