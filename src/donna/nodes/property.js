// Generated by CoffeeScript 1.10.0
(function() {
  var Doc, Node, Property, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Node = require('./node');

  Doc = require('./doc');

  _ = require('underscore');

  _.str = require('underscore.string');

  module.exports = Property = (function(superClass) {
    extend(Property, superClass);

    function Property(entity, node, lineMapping, options, name, comment) {
      this.entity = entity;
      this.node = node;
      this.lineMapping = lineMapping;
      this.options = options;
      this.name = name;
      this.doc = new Doc(comment, this.options);
      this.setter = false;
      this.getter = false;
    }

    Property.prototype.getLocation = function() {
      var error, error1, firstLine, locationData;
      try {
        if (!this.location) {
          locationData = this.node.variable.locationData;
          firstLine = locationData.first_line;
          this.location = {
            line: firstLine - this.lineMapping[firstLine] + 1
          };
        }
        return this.location;
      } catch (error1) {
        error = error1;
        if (this.options.verbose) {
          return console.warn("Get location error at " + this.fileName + ":", this.node, error);
        }
      }
    };

    Property.prototype.getSignature = function() {
      var error, error1;
      try {
        if (!this.signature) {
          this.signature = '';
          if (this.doc) {
            this.signature += this.doc.property ? "(" + (_.str.escapeHTML(this.doc.property)) + ") " : "(?) ";
          }
          this.signature += "<strong>" + this.name + "</strong>";
        }
        return this.signature;
      } catch (error1) {
        error = error1;
        if (this.options.verbose) {
          return console.warn('Get property signature error:', this.node, error);
        }
      }
    };

    return Property;

  })(Node);

}).call(this);
